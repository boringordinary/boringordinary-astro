---
import {
  Section,
  Text,
  Button,
  PricingCard,
  ImageClip,
  DiffusedGradientBg,
  VideoWidget,
} from "@/components";
import { client } from "@/content";
import Layout from "@/layouts/Layout.astro";
import { toPlainText } from "@portabletext/react";
import MuxPlayer from "@mux/mux-player-react";

export async function getStaticPaths() {
  const query = `
    *[_type == "industry"]{
      slug,
    }
  `;
  const data = await client.fetch(query);
  const paths = data.map((industry: any) => ({
    params: { slug: industry.slug.current },
  }));

  return paths;
}

const { slug } = Astro.params;

const query = `
*[_type == "industry" && slug.current == $slug][0]{
  ...,
  header {
    ...,
    "backgroundImage": backgroundImage.asset->,
    "image": image.asset->
  },
  pricing[]->{
    ...,
  },
  featuredWork[]->{
    ...,
    preview {
      ...,
      "image": image.asset->
    }
  },
  features[]->{
    ...,
    video {
      asset->
    }
  },
}
`;

const data = await client.fetch(query, { slug });

const bgGradient = `${data.header.backgroundImage.url}?h=400`;
---

<Layout title="Real Estate">
  <VideoWidget src="foo" title="Test" />
  <div class="relative overflow-hidden">
    <DiffusedGradientBg src={bgGradient}>
      <Section size="lg" align="center" className="relative">
        <div class="grid md:grid-cols-2 place-items-center z-10">
          <div class="flex flex-col justify-center gap-4">
            <Text display size="lg">{data.header.title}</Text>

            <div class="flex gap-4">
              <Button variant="primary" size="lg" round shadow="lg">
                Watch Video
              </Button>
            </div>
          </div>
          <ImageClip src={data.header.image.url} className="max-h-80 " />
        </div>
      </Section>
    </DiffusedGradientBg>
  </div>

  {
    data.features.map((feature: any) => {
      if (!feature) return null;

      const video = feature?.video?.asset;

      return (
        <Section size="lg">
          <div class="relative grid place-items-center gap-4 md:grid-cols-2 md:gap-6 lg:gap-8">
            <div class="flex flex-col justify-center">
              <div class="mb-4">
                <Text display size="md">
                  {feature.title}
                </Text>
              </div>

              <Text color="gray-500" size="lg">
                {toPlainText(feature.description)}
              </Text>

              <div class="my-6 flex gap-4">
                <div class="flex flex-col gap-4">
                  {feature.benefits?.map((benefit: any) => {
                    return (
                      <div class="flex gap-4">
                        <div class="aspect-1 flex h-14 w-14 items-center justify-center rounded-xl bg-violet-500 text-white">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                            class="h-5 w-5"
                          >
                            <path d="M11 5a3 3 0 11-6 0 3 3 0 016 0zM2.615 16.428a1.224 1.224 0 01-.569-1.175 6.002 6.002 0 0111.908 0c.058.467-.172.92-.57 1.174A9.953 9.953 0 018 18a9.953 9.953 0 01-5.385-1.572zM16.25 5.75a.75.75 0 00-1.5 0v2h-2a.75.75 0 000 1.5h2v2a.75.75 0 001.5 0v-2h2a.75.75 0 000-1.5h-2v-2z" />
                          </svg>
                        </div>
                        <div class="flex flex-col gap-2">
                          <Text display size="xs">
                            {benefit.title}
                          </Text>
                          <Text color="gray-500">{benefit.description}</Text>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>

            <div class="overflow-hidden rounded-xl shadow-2xl">
              {video && (
                <MuxPlayer
                  client:visible
                  style={{ height: "100%", maxWidth: "100%" }}
                  streamType="on-demand"
                  playbackId={video.playbackId}
                  metadata={{
                    video_title: "Strategy call",
                    viewer_user_id: "unidentified",
                  }}
                />
              )}
            </div>
          </div>
        </Section>
      );
    })
  }

  <Section>
    <div class="max-w-screen-md mx-auto">
      <PricingCard tiers={data.pricing} client:load />
    </div>
  </Section>
</Layout>
